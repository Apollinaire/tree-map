{"version":3,"sources":["components/treeLayer.jsx","components/treePopUp.jsx","components/drawer.jsx","components/map.jsx","App.js","serviceWorker.js","index.js"],"names":["TreeLayer","_this","this","treeIds","props","treeDict","react_default","a","createElement","lib_esm","type","id","layout","icon-image","map","onMouseEnter","onTreeHover","bind","onMouseLeave","onTreeEndHover","coordinates","geometry","onClick","onTreeClick","key","Component","TreePopUp","hoveredTree","onPopUpClick","recordid","offset","fields","libellefrancais","espece","genre","dateplantation","substr","TemporaryDrawer","classes","Drawer_default","open","leftDrawer","onClose","toggleDrawer","tabIndex","role","onKeyDown","anchor","bottomDrawer","className","wikiRow","treeImg","src","thumbnailUrl","alt","wikiTextContainer","wikiDesc","React","withStyles","list","width","fullList","marginTop","marginBottom","marginRight","display","float","marginLeft","Map","ReactMapboxGl","minZoom","maxZoom","accessToken","token","mapStyle","style","flyToOptions","speed","TreeMap","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onMapLoad","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","hoveredTreeID","_ref","getCanvas","cursor","setState","_ref2","state","keyword","wikiTreeData","TreeData","asyncToGenerator","regenerator_default","mark","_callee","ids","response","responseJson","maxNbTrees","i","wrap","_context","prev","next","fetch","sent","json","Math","min","parameters","rows","nhits","push","abrupt","records","nbTrees","console","log","stop","_ref4","_callee2","safeKeyword","urlBase","bestResultTitle","bestResultId","searchResponse","desc","descQueryResponse","descQueryJson","descPages","thumbnail","thumbQueryResponse","thumbQueryJson","_context2","split","join","concat","query","search","title","pageid","t0","pages","keys","extract","t1","source","t2","_x","apply","arguments","mapCenter","zoom","assertThisInitialized","onStyleLoad","center","containerStyle","height","treeLayer","treePopUp","drawer","App","components_map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3975e06a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layer, Feature } from 'react-mapbox-gl';\n\nclass TreeLayer extends Component {\n    render() {\n        const treeIds = this.props.treeIds;\n        const treeDict = this.props.treeDict;\n        return (\n            <Layer\n                type=\"symbol\"\n                id={'trees'}\n                layout={{'icon-image': 'billy'}}>\n                {\n                    treeIds.map(id => (\n                        <Feature\n                            onMouseEnter={this.props.onTreeHover.bind(this, id)}\n                            onMouseLeave={this.props.onTreeEndHover.bind(this)}\n                            coordinates={treeDict[id].geometry.coordinates}\n                            onClick={this.props.onTreeClick.bind(null, id)}\n                            key={id}\n                        />\n                    ))\n                }\n            </Layer>\n        );\n    }\n}\n\nexport default TreeLayer;","import React, { Component } from 'react';\nimport { Popup } from 'react-mapbox-gl';\n\nclass TreePopUp extends Component {\n    render() {\n        var hoveredTree = this.props.hoveredTree;\n        const onPopUpClick = this.props.onPopUpClick;\n        return (\n            <Popup\n                key={hoveredTree.recordid}\n                coordinates={hoveredTree.geometry.coordinates}\n                offset={15}\n                onClick={onPopUpClick}\n            >\n                <div>\n                    <h3>{hoveredTree.fields.libellefrancais}</h3>\n                    <div>Espèce : {hoveredTree.fields.espece}</div>\n                    <div>Genre : {hoveredTree.fields.genre}</div>\n                    {hoveredTree.fields.dateplantation ? (<div> Année de plantation : {\n                        hoveredTree.fields.dateplantation.substr(0, 4)} </div>) : null}\n                </div>\n            </Popup>\n        );\n    }\n}\n\nexport default TreePopUp;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\n\nconst styles = {\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    treeImg: {\n        marginTop: 10,\n        marginBottom: 10,\n        marginRight: 10,\n        width: 100,\n        display: 'inlineBlock',\n        float: 'left'\n    },\n    wikiRow: {\n        marginLeft: 10,\n        marginRight: 10,\n    },\n    wikiTextContainer: {\n        marginLeft: 10,\n        marginRight: 10,\n    }\n};\n\nclass TemporaryDrawer extends React.Component {\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <Drawer open={this.props.leftDrawer} onClose={this.props.toggleDrawer}>\n                    <div\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={this.props.toggleDrawer}\n                        onKeyDown={this.props.toggleDrawer}\n                    >\n                        {/* {this.sideList.bind(null, this.state.wikiData)} */}\n                    </div>\n                </Drawer>\n                <Drawer\n                    anchor=\"bottom\"\n                    open={this.props.bottomDrawer}\n                    onClose={this.props.toggleDrawer}\n                >\n                    <div \n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={this.props.toggleDrawer}\n                        onKeyDown={this.props.toggleDrawer}\n                    >\n                        <div className={classes.wikiRow}>\n                            <img className={classes.treeImg} src={this.props.thumbnailUrl} alt=\"Wiki Thumbnail\" />\n                        </div>\n                        <div className={classes.wikiTextContainer}>\n                            <p>{this.props.wikiDesc}</p>\n                        </div>\n                    </div>\n                </Drawer>\n            </div>\n        );\n    }\n}\n\nTemporaryDrawer.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TemporaryDrawer);","import React, { Component } from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { GeolocateControl } from 'mapbox-gl';\nimport TreeLayer from './treeLayer';\nimport TreePopUp from './treePopUp';\nimport TemporaryDrawer from './drawer';\nimport { token, style } from '../config.json';\n\nconst Map = ReactMapboxGl({\n    minZoom: 11,\n    maxZoom: 16,\n    accessToken: token\n});\nconst mapStyle = style;\nconst flyToOptions = {\n    speed: 0.6\n};\n\nclass TreeMap extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            treeDict: '',\n            nbTrees: 0,\n            treeIds: [],\n            hoveredTreeID: '',\n            mapCenter: [2.3466110229492188, 48.85613168160397],\n            zoom: [12],\n            leftDrawer: false,\n            bottomDrawer: false,\n            wikiTreeData: '',\n            thumbnailUrl : '',\n            wikiDesc : ''\n        };\n        this.toggleDrawer = this.toggleDrawer.bind(this);\n    }\n\n    onMapLoad = (map) => {\n        map.addControl(\n            new GeolocateControl({\n                positionOptions: {enableHighAccuracy: true},\n                trackUserLocation: false})\n                );\n      };\n\n    onTreeHover = (hoveredTreeID, { map }) => {\n        map.getCanvas().style.cursor = 'pointer';\n        this.setState({hoveredTreeID: hoveredTreeID});\n    }\n\n    onTreeEndHover = ({ map }) => {\n        map.getCanvas().style.cursor = '';\n        this.setState({hoveredTreeID: ''});\n    }\n\n    onTreeClick = (hoveredTreeID) => {\n        this.setState({\n            hoveredTreeID: hoveredTreeID,\n            bottomDrawer: true\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n        var libelle = this.state.treeDict[hoveredTreeID].fields.libellefrancais;\n        var genre = this.state.treeDict[hoveredTreeID].fields.genre;\n        var espece = this.state.treeDict[hoveredTreeID].fields.espece;\n        var keyword = genre + '_' + espece\n        this.wikiTreeData(keyword);\n    };\n\n    onPopUpClick = () => {\n        this.setState({\n            hoveredTreeID: ''\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n    }\n\n    toggleDrawer = () => {\n        this.setState({\n            bottomDrawer: false,\n            thumbnailUrl: '',\n            wikiDesc: ''\n        });\n    };\n\n    componentDidMount(){\n        this.TreeData();\n    }\n\n    TreeData = async () => {\n        var ids = [];\n        const response = await fetch(\n            'https://opendata.paris.fr/api/records/1.0/search/?dataset=arbresremarquablesparis&rows=200');\n        const responseJson = await response.json();\n        var maxNbTrees = Math.min(responseJson.parameters.rows, responseJson.nhits);\n        for (var i = 0; i < maxNbTrees; i++) {\n            ids.push(i)\n        }\n        return this.setState({\n            treeDict: responseJson.records,\n            nbTrees: maxNbTrees,\n            treeIds: ids\n        }, function(){\n            console.log('dict', this.state.treeDict);\n            console.log('nb', this.state.nbTrees);\n            console.log('ids', this.state.treeIds);\n        });\n    }\n\n    wikiTreeData = async (keyword) => {\n        var safeKeyword = keyword.split(' ').join('_')\n        console.log('Safe Keyword: ', safeKeyword)\n        var urlBase = 'https://fr.wikipedia.org/w/api.php?format=json&origin=*'\n        // First search for a page, get best result, get the title of the best result\n        var bestResultTitle = ''\n        var bestResultId = 0\n        try {\n            const searchResponse = await fetch(\n                `${urlBase}&action=query&list=search&srsearch=${safeKeyword}`);\n                // `${urlBase}&action=opensearch&search=${safeGenre}+incategory:Arbre&redirects=resolve`);\n            const responseJson = await searchResponse.json();\n            console.log('Search response Json', responseJson);\n            bestResultTitle = await responseJson.query.search[0].title;\n            bestResultId = await responseJson.query.search[0].pageid;\n            console.log('Best result', bestResultTitle);\n        } catch (error) {\n            console.log('search error', error)\n        }\n\n        var desc = ''\n        try {\n            const descQueryResponse = await fetch(\n                `${urlBase}&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=${bestResultTitle}`);\n            const descQueryJson = await descQueryResponse.json();\n            console.log('descQuery Json', descQueryJson)\n            const descPages = await descQueryJson.query.pages;\n            console.log('Pages', descPages)\n            desc = await descPages[Object.keys(descPages)[0]].extract;\n            console.log('desc', desc)\n        } catch (error) {\n            console.log('desc error', error)\n        }\n\n        // Then query the best result's page :)\n        var thumbnail = ''\n        try {\n            const thumbQueryResponse = await fetch(\n                `${urlBase}&action=query&prop=pageimages&titles=${bestResultTitle}&pithumbsize=200`);\n            const thumbQueryJson = await thumbQueryResponse.json();\n            console.log('thumbQuery Json', thumbQueryJson)\n            var thumbnail = await thumbQueryJson.query.pages[bestResultId].thumbnail.source;\n            console.log('Thumbnail', thumbnail)\n        } catch (error) {\n            console.log('thumbnail error', error)\n        }\n\n        return this.setState({\n            wikiDesc: desc,\n            thumbnailUrl: thumbnail\n        }, function(){\n            console.log('wikiData', this.state.thumbnailUrl);\n        });\n    }\n\n    render() {\n        const hoveredTreeID = this.state.hoveredTreeID;\n        const mapCenter = this.state.mapCenter;\n        const zoom = this.state.zoom;\n        return (\n            <div>\n                <Map\n                    onStyleLoad={this.onMapLoad}\n                    style={mapStyle}\n                    center={mapCenter}\n                    containerStyle={{ width: '100vw', height: '100vh'}}\n                    flyToOptions={flyToOptions}\n                    zoom={zoom}\n                >\n                    <TreeLayer\n                        onTreeHover={this.onTreeHover}\n                        onTreeEndHover={this.onTreeEndHover}\n                        treeIds={this.state.treeIds}\n                        treeDict={this.state.treeDict}\n                        onTreeClick={this.onTreeClick}\n                    />\n                    {hoveredTreeID && (\n                        <TreePopUp\n                            hoveredTree={this.state.treeDict[hoveredTreeID]}\n                            onPopUpClick={this.onPopUpClick}\n                        />\n                        )}\n                </Map>\n                <TemporaryDrawer\n                    wikiDesc={this.state.wikiDesc}\n                    thumbnailUrl={this.state.thumbnailUrl}\n                    leftDrawer={this.state.leftDrawer}\n                    bottomDrawer={this.state.bottomDrawer}\n                    toggleDrawer={this.toggleDrawer}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TreeMap;\n","import React, { Component } from 'react';\nimport TreeMap from './components/map'\nimport TemporaryDrawer from './components/drawer'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TemporaryDrawer />\n        <TreeMap />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}