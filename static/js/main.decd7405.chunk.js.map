{"version":3,"sources":["components/treeLayer.jsx","components/treePopUp.jsx","components/map.jsx","App.js","serviceWorker.js","index.js"],"names":["TreeLayer","_this","this","treeIds","props","treeDict","react_default","a","createElement","lib_esm","type","id","layout","icon-image","map","onMouseEnter","onTreeHover","bind","onMouseLeave","onTreeEndHover","coordinates","geometry","onClick","onTreeClick","key","Component","TreePopUp","hoveredTree","onPopUpClick","recordid","offset","fields","libellefrancais","espece","genre","dateplantation","substr","Map","ReactMapboxGl","minZoom","maxZoom","accessToken","token","mapStyle","style","flyToOptions","speed","TreeMap","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onMapLoad","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","hoveredTreeID","_ref","getCanvas","cursor","setState","_ref2","TreeData","asyncToGenerator","regenerator_default","mark","_callee","ids","response","responseJson","maxNbTrees","i","wrap","_context","prev","next","fetch","sent","json","Math","min","parameters","rows","nhits","push","abrupt","records","nbTrees","console","log","state","stop","mapCenter","zoom","onStyleLoad","center","containerStyle","width","height","treeLayer","treePopUp","App","components_map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.decd7405.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layer, Feature } from 'react-mapbox-gl';\n\nclass TreeLayer extends Component {\n    render() {\n        const treeIds = this.props.treeIds;\n        const treeDict = this.props.treeDict;\n        return (\n            <Layer\n                type=\"symbol\"\n                id={'trees'}\n                layout={{'icon-image': 'billy'}}>\n                {\n                    treeIds.map(id => (\n                        <Feature\n                            onMouseEnter={this.props.onTreeHover.bind(this, id)}\n                            onMouseLeave={this.props.onTreeEndHover.bind(this)}\n                            coordinates={treeDict[id].geometry.coordinates}\n                            onClick={this.props.onTreeClick.bind(null, id)}\n                            key={id}\n                        />\n                    ))\n                }\n            </Layer>\n        );\n    }\n}\n\nexport default TreeLayer;","import React, { Component } from 'react';\nimport { Popup } from 'react-mapbox-gl';\n\nclass TreePopUp extends Component {\n    render() {\n        var hoveredTree = this.props.hoveredTree;\n        var onPopUpClick = this.props.onPopUpClick;\n        return (\n            <Popup\n                key={hoveredTree.recordid}\n                coordinates={hoveredTree.geometry.coordinates}\n                offset={15}\n                onClick={onPopUpClick}\n            >\n                <div>\n                    <h3>{hoveredTree.fields.libellefrancais}</h3>\n                    <div>Espèce : {hoveredTree.fields.espece}</div>\n                    <div>Genre : {hoveredTree.fields.genre}</div>\n                    {hoveredTree.fields.dateplantation ? (<div> Année de plantation : {\n                        hoveredTree.fields.dateplantation.substr(0, 4)} </div>) : null}\n                </div>\n            </Popup>\n        );\n    }\n}\n\nexport default TreePopUp;","import React, { Component } from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { GeolocateControl } from 'mapbox-gl';\nimport TreeLayer from './treeLayer';\nimport TreePopUp from './treePopUp';\nimport { token, style } from '../config.json';\n\nconst Map = ReactMapboxGl({\n    minZoom: 8,\n    maxZoom: 15,\n    accessToken: token\n});\nconst mapStyle = style;\nconst flyToOptions = {\n    speed: 0.6\n};\n\nclass TreeMap extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            treeDict: '',\n            nbTrees: 0,\n            treeIds: [],\n            hoveredTreeID: '',\n            mapCenter: [2.3466110229492188, 48.85613168160397],\n            zoom: [12]\n        };\n    }\n\n    onMapLoad = (map) => {\n        map.addControl(\n            new GeolocateControl({\n                positionOptions: {enableHighAccuracy: true},\n                trackUserLocation: false})\n                );\n      };\n\n    onTreeHover = (hoveredTreeID, { map }) => {\n        map.getCanvas().style.cursor = 'pointer';\n        this.setState({hoveredTreeID: hoveredTreeID});\n    }\n\n    onTreeEndHover = ({ map }) => {\n        map.getCanvas().style.cursor = '';\n        this.setState({hoveredTreeID: ''});\n    }\n\n    onTreeClick = (hoveredTreeID) => {\n        this.setState({\n            hoveredTreeID: hoveredTreeID,\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n    };\n\n    onPopUpClick = () => {\n        this.setState({\n            hoveredTreeID: '',\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n    }\n\n    componentDidMount(){\n        this.TreeData();\n    }\n\n    TreeData = async () => {\n        var ids = [];\n        const response = await fetch('https://opendata.paris.fr/api/records/1.0/search/?dataset=arbresremarquablesparis&rows=200');\n        const responseJson = await response.json();\n        var maxNbTrees = Math.min(responseJson.parameters.rows, responseJson.nhits);\n        for (var i = 0; i < maxNbTrees; i++) {\n            ids.push(i)\n        }\n        return this.setState({\n            treeDict: responseJson.records,\n            nbTrees: maxNbTrees,\n            treeIds: ids\n        }, function(){\n            console.log('dict', this.state.treeDict);\n            console.log('nb', this.state.nbTrees);\n            console.log('ids', this.state.treeIds);\n        });\n    }\n\n    render() {\n        const hoveredTreeID = this.state.hoveredTreeID;\n        const mapCenter = this.state.mapCenter;\n        const zoom = this.state.zoom;\n        return (\n            <Map\n                onStyleLoad={this.onMapLoad}\n                style={mapStyle}\n                center={mapCenter}\n                containerStyle={{ width: '100vw', height: '100vh'}}\n                flyToOptions={flyToOptions}\n                zoom={zoom}\n            >\n                <TreeLayer\n                    onTreeHover={this.onTreeHover}\n                    onTreeEndHover={this.onTreeEndHover}\n                    treeIds={this.state.treeIds}\n                    treeDict={this.state.treeDict}\n                    onTreeClick={this.onTreeClick}\n                />\n                {hoveredTreeID && (\n                    <TreePopUp\n                        hoveredTree={this.state.treeDict[hoveredTreeID]}\n                        onPopUpClick={this.onPopUpClick}\n                    />\n                    )}\n            </Map>\n        );\n    }\n}\n\nexport default TreeMap;\n","import React, { Component } from 'react';\nimport TreeMap from './components/map'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <TreeMap />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}