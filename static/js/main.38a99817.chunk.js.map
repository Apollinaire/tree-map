{"version":3,"sources":["components/treeLayer.jsx","components/treePopUp.jsx","components/drawer.jsx","components/map.jsx","App.js","serviceWorker.js","index.js"],"names":["TreeLayer","_this","this","treeIds","props","treeDict","react_default","a","createElement","lib_esm","type","id","layout","icon-image","map","onMouseEnter","onTreeHover","bind","onMouseLeave","onTreeEndHover","coordinates","geometry","onClick","onTreeClick","key","Component","TreePopUp","hoveredTree","onPopUpClick","recordid","offset","fields","libellefrancais","espece","genre","dateplantation","substr","TemporaryDrawer","Drawer_default","open","leftDrawer","onClose","toggleDrawer","tabIndex","role","onKeyDown","anchor","bottomDrawer","src","thumbnailUrl","alt","React","withStyles","list","width","fullList","Map","ReactMapboxGl","minZoom","maxZoom","accessToken","token","mapStyle","style","flyToOptions","speed","TreeMap","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onMapLoad","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","hoveredTreeID","_ref","getCanvas","cursor","setState","_ref2","species","state","console","log","wikiTreeData","TreeData","asyncToGenerator","regenerator_default","mark","_callee","ids","response","responseJson","maxNbTrees","i","wrap","_context","prev","next","fetch","sent","json","Math","min","parameters","rows","nhits","push","abrupt","records","nbTrees","stop","_ref4","_callee2","safeSpecies","searchResponse","bestResult","bestResultTitle","queryResponse","queryJson","pages","thumbnail","_context2","split","join","concat","slice","query","keys","source","_x","apply","arguments","mapCenter","zoom","assertThisInitialized","onStyleLoad","center","containerStyle","height","treeLayer","treePopUp","drawer","App","components_map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38a99817.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layer, Feature } from 'react-mapbox-gl';\n\nclass TreeLayer extends Component {\n    render() {\n        const treeIds = this.props.treeIds;\n        const treeDict = this.props.treeDict;\n        return (\n            <Layer\n                type=\"symbol\"\n                id={'trees'}\n                layout={{'icon-image': 'billy'}}>\n                {\n                    treeIds.map(id => (\n                        <Feature\n                            onMouseEnter={this.props.onTreeHover.bind(this, id)}\n                            onMouseLeave={this.props.onTreeEndHover.bind(this)}\n                            coordinates={treeDict[id].geometry.coordinates}\n                            onClick={this.props.onTreeClick.bind(null, id)}\n                            key={id}\n                        />\n                    ))\n                }\n            </Layer>\n        );\n    }\n}\n\nexport default TreeLayer;","import React, { Component } from 'react';\nimport { Popup } from 'react-mapbox-gl';\n\nclass TreePopUp extends Component {\n    render() {\n        var hoveredTree = this.props.hoveredTree;\n        const onPopUpClick = this.props.onPopUpClick;\n        return (\n            <Popup\n                key={hoveredTree.recordid}\n                coordinates={hoveredTree.geometry.coordinates}\n                offset={15}\n                onClick={onPopUpClick}\n            >\n                <div>\n                    <h3>{hoveredTree.fields.libellefrancais}</h3>\n                    <div>Espèce : {hoveredTree.fields.espece}</div>\n                    <div>Genre : {hoveredTree.fields.genre}</div>\n                    {hoveredTree.fields.dateplantation ? (<div> Année de plantation : {\n                        hoveredTree.fields.dateplantation.substr(0, 4)} </div>) : null}\n                </div>\n            </Popup>\n        );\n    }\n}\n\nexport default TreePopUp;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\n\nconst styles = {\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n};\n\nclass TemporaryDrawer extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <Drawer open={this.props.leftDrawer} onClose={this.props.toggleDrawer}>\n                    <div\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={this.props.toggleDrawer}\n                        onKeyDown={this.props.toggleDrawer}\n                    >\n                        {/* {this.sideList.bind(null, this.state.wikiData)} */}\n                    </div>\n                </Drawer>\n                <Drawer\n                    anchor=\"bottom\"\n                    open={this.props.bottomDrawer}\n                    onClose={this.props.toggleDrawer}\n                >\n                    <div\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={this.props.toggleDrawer}\n                        onKeyDown={this.props.toggleDrawer}\n                    >\n                        <img src={this.props.thumbnailUrl} alt=\"Thubnail\" />\n                    </div>\n                </Drawer>\n            </div>\n        );\n    }\n}\n\nTemporaryDrawer.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TemporaryDrawer);","import React, { Component } from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport { GeolocateControl } from 'mapbox-gl';\nimport TreeLayer from './treeLayer';\nimport TreePopUp from './treePopUp';\nimport TemporaryDrawer from './drawer';\nimport { token, style } from '../config.json';\n\nconst Map = ReactMapboxGl({\n    minZoom: 11,\n    maxZoom: 16,\n    accessToken: token\n});\nconst mapStyle = style;\nconst flyToOptions = {\n    speed: 0.6\n};\n\nclass TreeMap extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            treeDict: '',\n            nbTrees: 0,\n            treeIds: [],\n            hoveredTreeID: '',\n            mapCenter: [2.3466110229492188, 48.85613168160397],\n            zoom: [12],\n            leftDrawer: false,\n            bottomDrawer: false,\n            wikiTreeData: '',\n            thumbnailUrl : ''\n        };\n        this.toggleDrawer = this.toggleDrawer.bind(this);\n    }\n\n    onMapLoad = (map) => {\n        map.addControl(\n            new GeolocateControl({\n                positionOptions: {enableHighAccuracy: true},\n                trackUserLocation: false})\n                );\n      };\n\n    onTreeHover = (hoveredTreeID, { map }) => {\n        map.getCanvas().style.cursor = 'pointer';\n        this.setState({hoveredTreeID: hoveredTreeID});\n    }\n\n    onTreeEndHover = ({ map }) => {\n        map.getCanvas().style.cursor = '';\n        this.setState({hoveredTreeID: ''});\n    }\n\n    onTreeClick = (hoveredTreeID) => {\n        this.setState({\n            hoveredTreeID: hoveredTreeID,\n            bottomDrawer: true\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n        var species = this.state.treeDict[hoveredTreeID].fields.libellefrancais;\n        console.log('species', species)\n        this.wikiTreeData(species);\n    };\n\n    onPopUpClick = () => {\n        this.setState({\n            hoveredTreeID: ''\n            //mapCenter: this.state.treeDict[hoveredTreeID].geometry.coordinates\n        });\n    }\n\n    toggleDrawer = () => {\n        this.setState({\n            bottomDrawer: false,\n            thumbnailUrl: ''\n        });\n    };\n\n    componentDidMount(){\n        this.TreeData();\n    }\n\n    TreeData = async () => {\n        var ids = [];\n        const response = await fetch(\n            'https://opendata.paris.fr/api/records/1.0/search/?dataset=arbresremarquablesparis&rows=200');\n        const responseJson = await response.json();\n        var maxNbTrees = Math.min(responseJson.parameters.rows, responseJson.nhits);\n        for (var i = 0; i < maxNbTrees; i++) {\n            ids.push(i)\n        }\n        return this.setState({\n            treeDict: responseJson.records,\n            nbTrees: maxNbTrees,\n            treeIds: ids\n        }, function(){\n            console.log('dict', this.state.treeDict);\n            console.log('nb', this.state.nbTrees);\n            console.log('ids', this.state.treeIds);\n        });\n    }\n\n    wikiTreeData = async (species) => {\n        var safeSpecies = species.split(' ').join('_')\n\n        // First search for a page, get best result, get the title of the best result\n        const searchResponse = await fetch(\n            `https://fr.wikipedia.org/w/api.php?action=opensearch&search=${safeSpecies}&format=json&redirects=resolve&origin=*`);\n        const responseJson = await searchResponse.json();\n        const bestResult = await responseJson[3][0];\n        console.log('Best result', bestResult);\n        var bestResultTitle = bestResult.split('/').slice(-1)[0]\n        console.log('Best result title', bestResultTitle);\n\n        // Then query the best result's page :)\n        const queryResponse = await fetch(\n            `https://fr.wikipedia.org/w/api.php?action=query&prop=pageimages&titles=${bestResultTitle}&format=json&pithumbsize=200&origin=*`);\n        const queryJson = await queryResponse.json();\n        console.log('Query Json', queryJson)\n        const pages = queryJson.query.pages;\n        console.log('Pages', pages)\n        const thumbnail = pages[Object.keys(pages)[0]].thumbnail.source;\n        console.log('Thumbnail', thumbnail)\n\n        //TODO const description = queryJson;\n        return this.setState({\n            thumbnailUrl: thumbnail\n        }, function(){\n            console.log('wikiData', this.state.thumbnailUrl);\n        });\n    }\n\n    render() {\n        const hoveredTreeID = this.state.hoveredTreeID;\n        const mapCenter = this.state.mapCenter;\n        const zoom = this.state.zoom;\n        return (\n            <div>\n                <Map\n                    onStyleLoad={this.onMapLoad}\n                    style={mapStyle}\n                    center={mapCenter}\n                    containerStyle={{ width: '100vw', height: '100vh'}}\n                    flyToOptions={flyToOptions}\n                    zoom={zoom}\n                >\n                    <TreeLayer\n                        onTreeHover={this.onTreeHover}\n                        onTreeEndHover={this.onTreeEndHover}\n                        treeIds={this.state.treeIds}\n                        treeDict={this.state.treeDict}\n                        onTreeClick={this.onTreeClick}\n                    />\n                    {hoveredTreeID && (\n                        <TreePopUp\n                            hoveredTree={this.state.treeDict[hoveredTreeID]}\n                            onPopUpClick={this.onPopUpClick}\n                        />\n                        )}\n                </Map>\n                <TemporaryDrawer\n                    thumbnailUrl={this.state.thumbnailUrl}\n                    leftDrawer={this.state.leftDrawer}\n                    bottomDrawer={this.state.bottomDrawer}\n                    toggleDrawer={this.toggleDrawer}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TreeMap;\n","import React, { Component } from 'react';\nimport TreeMap from './components/map'\nimport TemporaryDrawer from './components/drawer'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TemporaryDrawer />\n        <TreeMap />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}